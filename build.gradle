plugins {
    id 'eclipse'
    id 'maven-publish'
    id "org.jetbrains.changelog" version "2.1.+"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = "${mod_version}"
group = 'com.tagnumelite.projecteintegration'
archivesBaseName = "${mod_name}-${mc_version}"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

//println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    mappings channel: 'parchment', version: "${parchment_version}"

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'projecteintegration'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                projecteintegration {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'projecteintegration'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                projecteintegration {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'projecteintegration'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                projecteintegration {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'projecteintegration', '--all',
                    '--existing-mod', 'projecte',
                    '--existing', file('src/main/resources').toString(),
                    '--existing', file('src/generated/resources').toString(),
                    '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                projecteintegration {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir {
        dir 'libs'
    }
    maven {
        name 'CurseMaven'
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        name 'Jitpack'
        url 'https://jitpack.io'
        content {
            includeGroup 'com.github'
        }
    }
    maven { name 'Architectury'; url 'https://maven.architectury.dev/' }
    maven { name 'BlameJared'; url 'https://maven.blamejared.com' }
    maven { name 'ChickenBones'; url 'https://chickenbones.net/maven/' }
    maven { name 'Covers1624'; url 'https://maven.covers1624.net/' }
    maven { name 'Ellpeck'; url 'https://maven.ellpeck.de' }
    maven { name 'GeckoMaven'; url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven { name 'Progwml6'; url 'https://dvs1.progwml6.com/files/maven/' }
    maven { name 'Tamaized'; url 'https://maven.tamaized.com/releases' }
    maven { name 'TheIllusiveC4'; url 'https://maven.theillusivec4.top/' }
    maven { name 'TTerrag'; url 'https://maven.tterrag.com/' }
    maven { name 'Modmaven'; url 'https://modmaven.dev/' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // ======================= [ Required Mods ] =======================
    implementation fg.deobf("curse.maven:projecte-226410:${version_projecte}")

    // ======================= [ Runtime Mods ] =======================
    implementation fg.deobf("smashingmods:alchemylib:${mc_version}-${version_alchemylib}")
    runtimeOnly fg.deobf("curse.maven:alltheores-405593:${version_alltheores}")
    runtimeOnly fg.deobf("dev.architectury:architectury-forge:${version_architectury}")
    runtimeOnly fg.deobf("curse.maven:balm-531761:${version_balm}")
    //runtimeOnly fg.deobf("curse.maven:brandons-core-231382:${version_brandonscore}")
    runtimeOnly fg.deobf("smashingmods:chemlib:${mc_version}-${version_chemlib}")
    //runtimeOnly fg.deobf("curse.maven:citadel-331936:${version_citadel}")
    //runtimeOnly fg.deobf("codechicken:CodeChickenLib:${version_codechickenlib}:universal")
    runtimeOnly fg.deobf("team.chisel.ctm:CTM:${version_ctm}")
    runtimeOnly fg.deobf("curse.maven:cucumber-272335:${version_cucumber}")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${version_curios}")
    runtimeOnly fg.deobf("curse.maven:cyclops-core-232758:${version_cyclopscore}")
    runtimeOnly fg.deobf("sirttas.dpanvil:DPAnvil:${version_datapackanvil}")
    runtimeOnly fg.deobf("com.jozufozu.flywheel:flywheel-forge-1.19.2:${version_flywheel}")
    runtimeOnly fg.deobf("curse.maven:ftb-library-404465:${version_ftb_library}")
    runtimeOnly fg.deobf("software.bernie.geckolib:geckolib-forge-1.19:${version_geckolib}")
    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${version_jei}"))
    //implementation fg.deobf("slimeknights.mantle:Mantle:${version_mantle}")
    runtimeOnly fg.deobf("curse.maven:myrtrees-546151:${version_myrtrees}")
    //runtimeOnly fg.deobf("curse.maven:obfuscate-289380:${version_obfuscate}")
    //runtimeOnly fg.deobf("curse.maven:observerlib-316833:${version_observerlib}")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${version_patchouli}")
    runtimeOnly fg.deobf("curse.maven:resourceful-lib-570073:${version_resourceful_lib}")
    //runtimeOnly fg.deobf("curse.maven:structure-gel-api-378802:${version_structuregelapi}")

    // ======================= [ Optional Mods ] =======================
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${version_jei}"))
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${version_jei}"))

    implementation fg.deobf("curse.maven:allthemodium-364466:${version_allthemodium}")
    implementation fg.deobf("appeng:appliedenergistics2:${version_appliedenergistics}")
    implementation fg.deobf("smashingmods:alchemistry:${mc_version}-${version_alchemistry}")
    //implementation fg.deobf("curse.maven:astralsorcery-241721:${version_astralsorcery}")
    implementation fg.deobf("curse.maven:ars-nouveau-401955:${version_arsnouveau}")
    //implementation fg.deobf("curse.maven:blood-magic-224791:${version_bloodmagic}")
    //implementation fg.deobf("curse.maven:blue-skies-312918:${version_blueskies}")
    compileOnly fg.deobf("curse.maven:blue-skies-312918:${version_blueskies}")
    implementation fg.deobf("vazkii.botania:Botania:${version_botania}")
    implementation fg.deobf("curse.maven:chipped-456956:${version_chipped}")
    implementation fg.deobf("com.teamcofh:cofh_core:${mc_version}-${version_cofhcore}")
    implementation fg.deobf("curse.maven:compactcrafting-429735:${version_compactcrafting}")
    implementation fg.deobf("curse.maven:corail-woodcutter-331983:${version_corail_woodcutter}")
    //implementation fg.deobf("com.simibubi.create:Create:${version_create}")
    implementation fg.deobf("curse.maven:create-328085:${version_create}")
    //implementation fg.deobf("curse.maven:draconic-evolution-223565:${version_draconicevolution}")
    implementation fg.deobf("curse.maven:elemental-craft-395158:${version_elementalcraft}")
    implementation fg.deobf("curse.maven:evilcraft-74610:${version_evilcraft}")
    //implementation fg.deobf("curse.maven:exnihilo-sequentia-400012:${version_exnihilo_sequentia}")
    implementation fg.deobf("blank:ExNihiloSequentia-1.19.2-4.0.0.43:beta")
    implementation fg.deobf("curse.maven:extended-crafting-268387:${version_extendedcrafting}")
    implementation fg.deobf("curse.maven:farmers-delight-398521:${version_farmersdelight}")
    implementation fg.deobf("curse.maven:farming-for-blockheads-261924:${version_farmingforblockheads}")
    implementation fg.deobf("curse.maven:ftb-industrial-contraptions-539097:${version_ftb_industrial_contraptions}")
    //compileOnly fg.deobf("curse.maven:ice-and-fire-264231:${version_iceandfire}")
    implementation fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${mc_version}-${version_immersiveengineering}")
    implementation fg.deobf("com.buuz135:industrial-foregoing:${version_industrialforegoing}")
    //implementation fg.deobf("curse.maven:mana-and-artifice-406360:${version_manaandartifice}")
    //implementation fg.deobf("curse.maven:mrcrayfishs-vehicle-mod-286660:${version_mrcrayfishs_vehicle_mod}")
    implementation fg.deobf("curse.maven:mystical-agriculture-246640:${version_mysticalagriculture}")
    implementation(fg.deobf("de.ellpeck.naturesaura:NaturesAura:${version_naturesaura}", {
        exclude group: '*'
    }))
    //implementation fg.deobf("curse.maven:pams-harvestcraft-2-food-core-372534:${version_pamsharvestcraftfoodcore}")
    //implementation fg.deobf("curse.maven:pams-harvestcraft-2-crops-361385:${version_pamsharvestcraftcrops}")
    //implementation fg.deobf("curse.maven:pams-harvestcraft-2-food-extended-402231:${version_pamsharvestcraftfoodextended}")
    // Once availible, use https://modmaven.dev/me/desht/pneumaticcraft/pneumaticcraft-repressurized
    implementation fg.deobf("curse.maven:pneumaticcraft-repressurized-281849:${version_pneumaticcraft}")
    //implementation fg.deobf("vazkii.psi:Psi:${version_psi}")
    implementation fg.deobf("com.teamcofh:thermal_core:${mc_version}-${version_thermal_core}")
    implementation fg.deobf("com.teamcofh:thermal_cultivation:${mc_version}-${version_thermalcultivation}")
    implementation fg.deobf("com.teamcofh:thermal_expansion:${mc_version}-${version_thermalexpansion}")
    implementation fg.deobf("com.teamcofh:thermal_foundation:${mc_version}-${version_thermalfoundation}")
    implementation fg.deobf("com.teamcofh:thermal_innovation:${mc_version}-${version_thermalinnovation}")
    implementation fg.deobf("com.teamcofh:thermal_integration:${mc_version}-${version_thermalintegration}")
    implementation fg.deobf("com.teamcofh:thermal_locomotion:${mc_version}-${version_thermallocomotion}")
    //implementation fg.deobf("slimeknights.tconstruct:TConstruct:${version_tinkers}")
    implementation fg.deobf("com.hrznstudio:titanium:${version_titanium}")
    //implementation fg.deobf("curse.maven:touhou_little_maid-355044:${version_touhou_little_maid}")
    //implementation fg.deobf("curse.maven:woot-244049:${version_woot}")
}

jar {
    manifest {
        attributes([
            "Specification-Title": "projecteintegration",
            "Specification-Vendor": "tagnumelite",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${mod_version}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

javadoc {
    source = [sourceSets.main.allJava]
    // prevent java 8's strict doclint for javadocs from failing builds
    options.addStringOption('Xdoclint:none', '-quiet')
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveBaseName.set(project.archivesBaseName)
    archiveVersion.set("${project.version}")
    archiveClassifier.set('sources')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    archiveClassifier.set('javadoc')
}

artifacts {
    archives jar, sourcesJar, javadocJar
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = mod_name
            group = "com.tagnumelite"
            artifacts {
                artifact jar
                artifact sourcesJar
                artifact javadocJar
            }
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
        // GitHub Packages
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/tagnumelite/projecte-integration"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

changelog {
    version = "${project.version}"
    path = "${project.projectDir}/CHANGELOG.md"
    header = "[${-> version.get()}]"
    itemPrefix = "-"
    keepUnreleasedSection = true
    unreleasedTerm = "[Unreleased]"
    groups = ["Added", "Changed", "Ported", "Deprecated", "Removed", "Fixed", "Security"]
}

if (System.getenv().CURSEFORGE_API_KEY != null) {
    curseforge {
        apiKey System.getenv().CURSEFORGE_API_KEY
        project {
            id = "${cf_project}"
            addGameVersion "${mc_version}"
            changelog = "${project.changelog.get(mod_version).toString()}"
            changelogType = 'markdown'
            releaseType = "${release_type}"

            mainArtifact(jar) {
                relations {
                    requiredDependency 'projecte'

                    optionalDependency 'allthemodium'
                    optionalDependency 'applied-energistics-2'
                    optionalDependency 'alchemistry'
                    optionalDependency 'ars-nouveau'
                    //optionalDependency 'astral-sorcery'
                    //optionalDependency 'blood-magic'
                    optionalDependency 'blue-skies'
                    optionalDependency 'botania'
                    optionalDependency 'chipped'
                    optionalDependency 'compact-crafting'
                    optionalDependency 'create'
                    optionalDependency 'corail-woodcutter'
                    //optionalDependency 'draconic-evolution'
                    optionalDependency 'elemental-craft'
                    optionalDependency 'evilcraft'
                    optionalDependency 'ex-nihilo-sequentia'
                    optionalDependency 'extended-crafting'
                    optionalDependency 'farmers-delight'
                    optionalDependency 'farming-for-blockheads'
                    optionalDependency 'ftb-industrial-contraptions-forge'
                    //optionalDependency 'ice-and-fire-dragons'
                    optionalDependency 'immersive-engineering'
                    optionalDependency 'industrial-foregoing'
                    //optionalDependency 'mana-and-artifice'
                    //optionalDependency 'mrcrayfishs-vehicle-mod'
                    optionalDependency 'mystical-agriculture'
                    optionalDependency 'natures-aura'
                    //optionalDependency 'pams-harvestcraft-2-food-core'
                    //optionalDependency 'pams-harvestcraft-2-crops'
                    //optionalDependency 'pams-harvestcraft-2-food-extended'
                    optionalDependency 'pneumaticcraft-repressurized'
                    //optionalDependency 'psi'
					optionalDependency 'thermal-expansion'
					optionalDependency 'thermal-foundation'
                    //optionalDependency 'tinkers-construct'
                    //optionalDependency 'touhou-little-maid'
                    //optionalDependency 'woot'
                }
            }
        }
    }
}
